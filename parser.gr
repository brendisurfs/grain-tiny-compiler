import { O_PAREN, C_PAREN, SPC, NOP, NUM, CHAR } from "./Types"
import Array from "array"

// Node - the record type for a node in the AST.
let parseTokens = tks => {
  let mut current = 0
  let internalArray = Array.fromList(tks)

  let mut token = internalArray[current]
  print(token)
}
// -- BUG: bringing parser in here, cyclical dep issue anywhere else.
export enum NodeType {
  Program,
  FunctionCall,
  NumberLiteral,
  StringLiteral,
  CallExpression,
}

enum Param {
  None,
  StringLiteral(Node),
  NumberLiteral(Node),
  CallExpression(Node),
},
export record Node {
  nodeType: NodeType,
  value: String,
  mut params: Array<Param>,
}

// export let parseTokens = tks => {
//   let mut current = 0
//   let internalArray = Array.fromList(tks)

//   let emptyParams = Array.make(1, { nodeType: StringLiteral, value: "" })

//   let rec walk = () => {

//     let mut token = internalArray[current]
//     print(token)

//     let rec walk = () => {

//       let mut current = 0
//       let mut token = internalArray[current]

//       if (token.tokenType == NUM) {

//         current += 1
//         Node({ nodeType: NumberLiteral, value: token.value })
//       } else if (token.tokenType == CHAR) {
//         current += 1
//         Node({ nodeType: StringLiteral, value: token.value })
//       } else if (token.tokenType == O_PAREN || token.tokenType == C_PAREN) {
//         current += 1
//         token = internalArray[current]

//         let mut node = {
//           nodeType: CallExpression,
//           name: token.value,
//           params: emptyParams,
//         }

//         current += 1

//         token = internalArray[current]

//         while (token.tokenType != O_PAREN && token.tokenType != C_PAREN) {

//           print(node)
//           let newParams = Array.append(node.params, Array.make(1, walk()))
//           node.params = newParams
//         }
//         Node(node)
//       } else {
//         NodeLiteral({ litType: StringLiteral, value: "" })
//       }
//     }
//   }
// }
//

export *
