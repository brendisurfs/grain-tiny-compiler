import Process from "sys/process"
import Result from "result"
import Token from "./Token"
import String from "string"
import Regex from "regex"
import Stack from "stack"
import Array from "array"
import List from "list"
import { O_PAREN, C_PAREN, SPC, NOP, NUM, CHAR } from "./Types"

export let tokenizer = input => {
  let mut current = 0
  // make list with the SPC Char.
  let mut tokens = List.init(String.length(input), n => SPC)

  while (current < String.length(input)) {
    let splitStr = String.split("", input)
    let mut char = Array.get(current, splitStr)

    let letterRe = Result.unwrap(Regex.make("[a-z]"))
    let numberRe = Result.unwrap(Regex.make("[0-9]"))

    match (true) {
      true when char == " " => {
        current += 1
        continue
      },
      // match on parens
      true when char == "(" => {
        tokens = List.insert(O_PAREN(char), current, tokens)
        current += 1
        continue
      },
      true when char == ")" => {
        tokens = List.insert(C_PAREN(char), current, tokens)
        current += 1
        continue
      },
      // match on letters
      true when Regex.isMatch(letterRe, char) => {
        let mut value = ""
        while (Regex.isMatch(letterRe, char)) {
          value = String.concat(value, char)

          current += 1
          char = Array.get(current, splitStr)
        }
        // insert into space and re-assign.
        tokens = List.insert(CHAR(value), current, tokens)
        current += 1
        continue
      },
      true when Regex.isMatch(numberRe, char) => {
        let mut value = ""
        while (Regex.isMatch(numberRe, char)) {
          value = String.concat(value, char)
          current += 1
          char = Array.get(current, splitStr)
        }
        tokens = List.insert(NUM(value), current, tokens)
        current += 1
        continue
      },
      _ => {
        print("could not find char: " ++ char)
        Process.exit(0)
        break
      },
    }
  }
  let newList = List.filter(t => t != SPC, tokens)
  newList
}
