import Process from "sys/process"
import Result from "result"
import String from "string"
import Regex from "regex"
import Stack from "stack"
import Array from "array"
import List from "list"

enum Char {
  SPC,
  NOP,
  O_PAREN,
  C_PAREN,
  CHAR,
  NUM,
}

record Token {
  tokenType: Char,
  value: String,
}

export let tokenizer = (input: String) => {
  let mut current = 0
  // make list with the SPC Char.
  let mut tokens = List.init(String.length(input), n =>
    { tokenType: SPC, value: "" })

  while (current < String.length(input)) {
    let splitStr = String.split("", input)
    let mut char = Array.get(current, splitStr)

    let letterRe = Result.unwrap(Regex.make("[a-z]"))
    let numberRe = Result.unwrap(Regex.make("[0-9]"))

    match (true) {
      // match on spaces
      true when char == " " => {
        current += 1
        continue
      },
      // match on parens
      true when char == "(" => {
        tokens = List.insert(
          { tokenType: O_PAREN, value: char },
          current,
          tokens
        )
        current += 1
        continue
      },
      true when char == ")" => {
        tokens = List.insert(
          { tokenType: C_PAREN, value: char },
          current,
          tokens
        )
        current += 1
        continue
      },
      // match on letters
      true when Regex.isMatch(letterRe, char) => {
        let mut value = ""
        while (Regex.isMatch(letterRe, char)) {
          value = String.concat(value, char)

          current += 1
          char = Array.get(current, splitStr)
        }
        // insert into space and re-assign.
        tokens = List.insert({ tokenType: CHAR, value }, current, tokens)
        current += 1
        continue
      },
      // match on numbers
      true when Regex.isMatch(numberRe, char) => {
        let mut value = ""
        while (Regex.isMatch(numberRe, char)) {
          value = String.concat(value, char)
          current += 1
          char = Array.get(current, splitStr)
        }
        tokens = List.insert({ tokenType: NUM, value }, current, tokens)
        current += 1
        continue
      },
      // if not match, err
      _ => {
        print("could not find char: " ++ char)
        Process.exit(1)
        break
      },
    }
  }
  // since we filled that list with SPC, need to get rid of it.
  let newList = List.filter(t => t.tokenType != SPC, tokens)
  newList
}
